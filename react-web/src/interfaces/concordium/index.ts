import { Dispatch } from 'react'
import { toast } from 'react-toastify'
import { useState, useEffect } from 'react'
import { BigNumber } from '@ethersproject/bignumber'
import StellarSdk from 'stellar-sdk'
import Web3 from 'web3'
import Web3utils from 'web3-utils'

import BridgeContractBuild from 'interfaces/ethereum/Bridge.json'
import { validatorUrls, WithdrawResult } from 'interfaces/http'
import {detectConcordiumProvider, SchemaType} from "@concordium/browser-wallet-api-helpers";
import {AccountTransactionType} from "@concordium/common-sdk/lib/types";
import {JsonRpcClient} from "@concordium/common-sdk/lib/JsonRpcClient";
import {HttpProvider} from "@concordium/common-sdk/lib/providers/httpProvider";
import {CcdAmount} from "@concordium/common-sdk/lib/types/ccdAmount";
import {
    toBuffer,
    deserializeReceiveReturnValue,
    serializeUpdateContractParameters,
} from '@concordium/web-sdk';
import {method} from "lodash";
import {Buffer} from "buffer";

type ConcordiumDepositContractResult = {
  transactionHash: string
  events: {
    Deposit: {
      logIndex: string
    }
  }
}

const connectConcordiumWallet = async (setEthereumAccount: Dispatch<string>): Promise<void> => {
  const provider = await detectConcordiumProvider()
  const accountAddress = await provider.connect()
  if (accountAddress != null) {
    setEthereumAccount(accountAddress)
    // provider.addCIS2Tokens(accountAddress, ['2373'], BigInt(2928), BigInt(0));
  }
}

const depositConcordiumTransaction = async (
  stellarAccount: string,
  concordiumAccount: string,
  value: string
// ): Promise<ConcordiumDepositContractResult> => {
): Promise<void> => {
    const provider = await detectConcordiumProvider()
    const BRIDGE_CONTRACT_RAW_SCHEMA = ''
    const methodName = 'deposit'
    const ccdValue = Number(value) * 10**7
    const params = {
        amount: ccdValue,
        destination: stellarAccount
    }
    if (provider) {
        const ok = invokeMethod(methodName, params)
        if (!ok) {
            return;
        }
        const CONTRACT_NAME = "gbm_Bridge"
        const TOKEN_CONTRACT_INDEX = 2945n
        const CONTRACT_SUB_INDEX = 0n
        const method = 'deposit'
        const parameters = {
            amount: ccdValue,
            destination: stellarAccount
        }
        const BRIDGE_CONTRACT_RAW_SCHEMA = ''
        const param = serializeUpdateContractParameters(
            CONTRACT_NAME,
            method,
            parameters,
            toBuffer(BRIDGE_CONTRACT_RAW_SCHEMA, 'base64')
        );
        // eslint-disable-next-line no-console
        console.log(param);
        const res = await provider.sendTransaction(
            concordiumAccount,
            AccountTransactionType.Update,
            {
                amount: new CcdAmount(BigInt(ccdValue)),
                address: {
                    index: TOKEN_CONTRACT_INDEX,
                    subindex: CONTRACT_SUB_INDEX,
                },
                receiveName: `${CONTRACT_NAME}.${method}`,
                maxContractExecutionEnergy: 100000n,
            },
            parameters,
            {
                type: SchemaType.Parameter,
                value: param.toString(),
            },
            0
        );
        // eslint-disable-next-line no-console
        console.log(res)
    }
}

const withdrawEthereumTransaction = async (
  withdrawResult: WithdrawResult[],
  ethereumAccount: string
): Promise<void> => {
  await window.ethereum.request({ method: 'eth_requestAccounts' })
  const web3 = new Web3(window.ethereum)

  const withdrawERC20Request = {
    id: `0x${withdrawResult[0].deposit_id}`,
    expiration: BigNumber.from(withdrawResult[0].expiration),
    recipient: ethereumAccount,
    amount: withdrawResult[0].amount,
    token: withdrawResult[0].token,
  }

  const bridgeContract = new web3.eth.Contract(
    BridgeContractBuild.abi as Web3utils.AbiItem[],
    process.env.REACT_APP_ETHEREUM_BRIDGE_ACCOUNT
  )

  const indexes: number[] = []
  const signatures: Buffer[] = []

  for (let i = 0; i < validatorUrls.length; i++) {
    const addressSigner: string = await bridgeContract.methods.signers(i).call()
    const currentSignature =
      withdrawResult.find(result => result.address === addressSigner)
        ?.signature || ''
    indexes.push(i)
    signatures.push(Buffer.from(currentSignature, 'hex'))
  }

  return bridgeContract.methods
    .withdrawERC20(withdrawERC20Request, signatures, indexes)
    .send({ from: ethereumAccount })
}


const invokeMethod = async (
    method: string,
    parameters: unknown,
    schemaVersion: number = 0,
): Promise<boolean> => {
    const CONTRACT_NAME = ""
    const TOKEN_CONTRACT_INDEX = 0n
    const CONTRACT_SUB_INDEX = 0n
    const BRIDGE_CONTRACT_RAW_SCHEMA = ''
    const param = serializeUpdateContractParameters(
        CONTRACT_NAME,
        method,
        parameters,
        toBuffer(BRIDGE_CONTRACT_RAW_SCHEMA, 'base64')
    );
    // eslint-disable-next-line no-console
    console.log(param);
    const gRPCProvider = new HttpProvider("http://localhost:9095")
    const rpcClient = new JsonRpcClient(gRPCProvider)
    const res = await rpcClient.invokeContract({
        method: `${CONTRACT_NAME}.${method}`,
        contract: {
            index: TOKEN_CONTRACT_INDEX,
            subindex: CONTRACT_SUB_INDEX
        },
        parameter: param,
    });
    if (!res || res.tag === 'failure' || !res.returnValue) {
        throw new Error(
            `RPC call 'invokeContract' on method '${CONTRACT_NAME}.${method}' of contract '${TOKEN_CONTRACT_INDEX}' failed`
        );
    }
    const returnValues = deserializeReceiveReturnValue(
        toBuffer(res.returnValue, 'hex'),
        toBuffer(BRIDGE_CONTRACT_RAW_SCHEMA, 'base64'),
        CONTRACT_NAME,
        method,
        schemaVersion
    );
    // eslint-disable-next-line no-console
    console.log(returnValues);
    // eslint-disable-next-line no-console
    console.log(returnValues.admin.Account[0]);
    return true
}

export {
    connectConcordiumWallet,
    depositConcordiumTransaction,
    withdrawEthereumTransaction,
}
